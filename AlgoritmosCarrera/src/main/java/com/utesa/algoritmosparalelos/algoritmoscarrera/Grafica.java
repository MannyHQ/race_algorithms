/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.utesa.algoritmosparalelos.algoritmoscarrera;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.util.Arrays;
import java.util.Random;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author manny
 */
public class Grafica extends javax.swing.JFrame {

    /**
     * Creates new form Grafica
     */
    public Grafica() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 538, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 124, Short.MAX_VALUE)
        );

        jButton1.setText("Empezar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Tamaño del arreglo");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int[] arreglo = generarArregloAleatorio(Integer.parseInt(jTextField1.getText())); // Tamaño personalizado del arreglo
        int[] arregloCopiaBurbuja = Arrays.copyOf(arreglo, arreglo.length);
        int[] arregloCopiaBinaria = Arrays.copyOf(arreglo, arreglo.length);
        int[] arregloCopiaQuickSort = Arrays.copyOf(arreglo, arreglo.length);
        int[] arregloCopiaInsercion = Arrays.copyOf(arreglo, arreglo.length);
        int[] arregloCopiaSecuencial = Arrays.copyOf(arreglo, arreglo.length);
        int valorBusqueda = 955; // Valor de busqueda para probar la busqueda binaria y secuencial
        DefaultCategoryDataset datos = new DefaultCategoryDataset();
        ExecutorService executorService = Executors.newFixedThreadPool(6);

        CompletableFuture<Void> tareaBurbuja = CompletableFuture.runAsync(() -> {
            double startTime = System.currentTimeMillis();
            metodoBurbuja(arregloCopiaBurbuja);
            double endTime = System.currentTimeMillis();
            System.out.println("Tiempo de Burbuja: " + (endTime - startTime) + " ms");
            datos.setValue((double)((endTime - startTime)/1000), "Metodo Burbuja "+(double)((endTime - startTime)/1000)+" segundos", "Algoritmos");
        }, executorService);

        CompletableFuture<Void> tareaBinaria = CompletableFuture.runAsync(() -> {
            double startTime = System.currentTimeMillis();
             Arrays.sort(arregloCopiaBinaria); // Ordena el arreglo para la búsqueda binaria
            int resultado = busquedaBinaria(arregloCopiaBinaria, valorBusqueda);
            double endTime = System.currentTimeMillis();
            System.out.println("Tiempo de Búsqueda Binaria: " + (endTime - startTime) + " ms");
            if (resultado != -1) {
                System.out.println("Resultado de la Búsqueda Binaria: Elemento encontrado en la posición " + resultado);
            } else {
                System.out.println("Resultado de la Búsqueda Binaria: Elemento no encontrado");
            }
            datos.setValue((double)((endTime - startTime)/1000), "Busqueda binaria "+(double)((endTime - startTime)/1000)+" segundos", "Algoritmos");
        }, executorService);

        CompletableFuture<Void> tareaQuickSort = CompletableFuture.runAsync(() -> {
            double startTime = System.currentTimeMillis();
            quickSort(arregloCopiaQuickSort, 0, arregloCopiaQuickSort.length - 1);
            double endTime = System.currentTimeMillis();
            System.out.println("Tiempo de QuickSort: " + (endTime - startTime) + " ms");
            datos.setValue((double)((endTime - startTime)/1000), "QuickSort "+(double)((endTime - startTime)/1000)+" segundos", "Algoritmos");
        }, executorService);

        CompletableFuture<Void> tareaInsercion = CompletableFuture.runAsync(() -> {
            double startTime = System.currentTimeMillis();
            metodoInsercion(arregloCopiaInsercion);
            double endTime = System.currentTimeMillis();
            System.out.println("Tiempo de Inserción: " + (endTime - startTime) + " ms");
            datos.setValue((double)((endTime - startTime)/1000), "Metodo de insercion "+(double)((endTime - startTime)/1000)+" segundos", "Algoritmos");
        }, executorService);

        CompletableFuture<Void> tareaSecuencial = CompletableFuture.runAsync(() -> {
            double startTime = System.currentTimeMillis();
            Arrays.sort(arregloCopiaSecuencial);
            int resultado = busquedaSecuencial(arregloCopiaSecuencial, valorBusqueda);
            double endTime = System.currentTimeMillis();
            System.out.println("Tiempo de Búsqueda Secuencial: " + (endTime - startTime) + " ms");
            if (resultado != -1) {
                System.out.println("Resultado de la Búsqueda Secuencial: Elemento encontrado en la posición " + resultado);
            } else {
                System.out.println("Resultado de la Búsqueda Secuencial: Elemento no encontrado");
            }
            datos.setValue((double)((endTime - startTime)/1000), "Busqueda secuencial "+(double)((endTime - startTime)/1000)+" segundos", "Algoritmos");
        }, executorService);
        
        CompletableFuture<Void> tareaGraficar = CompletableFuture.runAsync(() -> {
            JFreeChart grafico_barras = ChartFactory.createBarChart3D("Algoritmos Paralelos","Algoritmos de la tarea","Segundos",datos,PlotOrientation.VERTICAL,true,true,false);
            grafico_barras.setBackgroundPaint(Color.orange);
            grafico_barras.getTitle().setPaint(Color.RED);
            CategoryPlot p = grafico_barras.getCategoryPlot();
            p.setRangeGridlinePaint(Color.BLUE);
            ChartFrame frame = new ChartFrame("Algoritmos",grafico_barras);
            //ChartPanel panel = new ChartPanel(grafico_barras);
            //panel.setMouseWheelEnabled(true);
            //panel.setPreferredSize(new Dimension(400,200));
            frame.setVisible(true);
            frame.setSize(400,350);
            //jPanel1.setLayout(new BorderLayout());
            //jPanel1.add(frame,BorderLayout.NORTH);
            pack();
            repaint();
        }, executorService);

        CompletableFuture<Void> todasLasTareas = CompletableFuture.allOf(tareaBurbuja, tareaBinaria, tareaQuickSort, tareaInsercion, tareaSecuencial, tareaGraficar);

        try {
            todasLasTareas.get(); // Espera a que todas las tareas se completen
        } catch (InterruptedException | ExecutionException e) {
            e.printStackTrace();
        }

        executorService.shutdown();
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed
    
    // Implementación del método de ordenación Burbuja
    public static void metodoBurbuja(int[] arreglo) {
        int n = arreglo.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (arreglo[j] > arreglo[j + 1]) {
                    int temp = arreglo[j];
                    arreglo[j] = arreglo[j + 1];
                    arreglo[j + 1] = temp;
                }
            }
        }
    }

    // Implementación de la búsqueda binaria
    public static int busquedaBinaria(int[] arreglo, int elemento) {
        int izquierda = 0;
        int derecha = arreglo.length - 1;
        while (izquierda <= derecha) {
            int medio = izquierda + (derecha - izquierda) / 2;
            if (arreglo[medio] == elemento) {
                return medio;
            }
            if (arreglo[medio] < elemento) {
                izquierda = medio + 1;
            } else {
                derecha = medio - 1;
            }
        }
        return -1;
    }

    // Implementación del algoritmo de ordenación QuickSort
    public static void quickSort(int[] arreglo, int inicio, int fin) {
        if (inicio < fin) {
            int indiceParticion = particion(arreglo, inicio, fin);
            quickSort(arreglo, inicio, indiceParticion - 1);
            quickSort(arreglo, indiceParticion + 1, fin);
        }
    }

    public static int particion(int[] arreglo, int inicio, int fin) {
        int pivote = arreglo[fin];
        int i = (inicio - 1);
        for (int j = inicio; j < fin; j++) {
            if (arreglo[j] <= pivote) {
                i++;
                int temp = arreglo[i];
                arreglo[i] = arreglo[j];
                arreglo[j] = temp;
            }
        }
        int temp = arreglo[i + 1];
        arreglo[i + 1] = arreglo[fin];
        arreglo[fin] = temp;
        return i + 1;
    }
// Implementación de la búsqueda secuencial
public static int busquedaSecuencial(int[] arreglo, int elemento) {
    for (int i = 0; i < arreglo.length; i++) {
        if (arreglo[i] == elemento) {
            return i;
        }
    }
    return -1;
}

    // Implementación del método de inserción
    public static void metodoInsercion(int[] arreglo) {
        int n = arreglo.length;
        for (int i = 1; i < n; i++) {
            int clave = arreglo[i];
            int j = i - 1;
            while (j >= 0 && arreglo[j] > clave) {
                arreglo[j + 1] = arreglo[j];
                j = j - 1;
            }
            arreglo[j + 1] = clave;
        }
    }
     // Función para generar un arreglo de números aleatorios
    public static int[] generarArregloAleatorio(int tamaño) {
        int[] arreglo = new int[tamaño];
        Random rand = new Random();
        for (int i = 0; i < tamaño; i++) {
            arreglo[i] = rand.nextInt(100000);
        }
        return arreglo;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Grafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Grafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Grafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Grafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Grafica().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
